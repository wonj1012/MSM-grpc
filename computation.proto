syntax = "proto3";

package computation;

// The computation service definition.
service ComputationService {
  // Sends computation data to a node
  rpc sendPoint (PointRequest) returns (ResultAck);

  // Streams computation data to a node
  rpc StreamComputationData (StreamRequest) returns (stream ComputationData);
}

// Define a message for your nested 'base' structure
message Base {
  string x = 1; // bigint represented as string
  string y = 2; // bigint represented as string
}

// Define the main data message
message ComputationData {
  repeated string scalar = 1; // Array of bigint, represented as strings
  repeated Base base = 2; // Array of 'Base' objects
}

message PointRequest {
  string x = 1;
  string y = 2;
  string clientId = 3;
}

// The request message containing the computation data.
message ComputationRequest {
  string data = 1;
}

// The acknowledgment message for computation data reception.
message ComputationAck {
  bool success = 1;
}

// The message containing computation results.
message ComputationResult {
  string result = 1;
}

message ResultAck {
  bool success = 1;
}

message StreamRequest {
  string clientId = 1;
}

// message ComputationData {
//     string data = 1;
// }
